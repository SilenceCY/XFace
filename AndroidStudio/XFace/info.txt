XFacePCA_hjw是以前版本，XFace是小论文的实验版本

****** 2014-3-15 ******
开始继续完善 [该版本是拿给本科生使用的版本，包含了人脸检测模块，但是存在程序异常退出的情况]
完成一个用户可以添加多张照片的功能，检测出程序闪退的原因是人脸检测模块[当前使用的是JavaDetector]
对大量人脸数据和少量人脸数据进行对比，得出结果是：在大量人脸数据情况下，并不能有效地提高人脸识别准确率

TODO：
1.用户及其照片的管理
2.人脸检测模块使用NativeDetector形式
3.使用交叉验证的方法验证在含有更多数据的时候准确率是否会提高
4.使用自定义的EigenFace算法代替OpenCV内置的EigenFace算法
5.改善程序在暂停和重新进入时的状态！不要出现界面无法响应的情况

****** 2014-3-16 ******
问题2"人脸检测模块使用NativeDetector形式"
使用NativeDetector依然存在异常退出的情况，一般就只能跟踪10s左右，原因未知
另外，如果要进行人脸检测首先要将mat逆时针旋转90度，之后再旋转回来，因为竖屏状态下默认情况得到的图片是倒着的
新版本将人脸检测模块整合到了人脸识别模块，统一成XFaceLibrary，JNI部分只有一个xface.cpp文件
如果在JNI代码中使用了android log功能的话，除了要include<android/log.h>之外，还需要在android.mk中添加LOCAL_LDLIBS+= -llog
搞定了将底层算法由调用OpenCV内置算法改成了调用自定义的EigenFaces算法
问题5"改善程序在暂停和重新进入时的状态！不要出现界面无法响应的情况"
在回到Home界面之后再回到应用程序时，摄像头不会获取图片帧，界面也就不显示任何内容了，原因未知，可能和connectCamera什么的有关
问题3"使用交叉验证的方法验证在含有更多数据的时候准确率是否会提高"
编写C++版本的交叉验证算法有些麻烦！
问题1"用户及其照片的管理"
完成用户列表界面

TODO:
1.尝试将底层算法进行优化，初始化时只是读取算法模型，识别的时候只是进行识别操作，提高运行速度
2.添加照片的管理

****** 2014-3-17 ******
疑点：关于JNI层和Java层数据的传递，从Java层传递long型数据到Jni层得到的结果不对！
最终原因是代码错误，在底层要显示出long类型的数据到底是多少应该使用%lld，不是%ld，后者对long类型的数据进行截断了
但是对于long类型转换成FaceRecognizer*的过程还是失败！--> 可以尝试在Xcode中直接对C++代码进行测试
在Xcode中(test_contrib方法)的测试结果是long和FaceRecognizer*两者可以进行转换！但是在NDK开发中没有成功！
猜测的原因：电脑是64位处理器，而目前手机大部分都是32位处理器！(或者和编译器有关)
上面的猜测应该是错的，可能真正的原因是多线程环境下虽然地址还是原来的地址，但是对象不对了！
要仔细研究FaceTracker是怎么实现的！

可以尝试的方法：保存model的数据，即eigenvector, eigenvalue, mean等
提供一个模型建立的方式，将orl数据库中的人脸和已有的人脸数据进行计算，保存结果
projections中不保存orl数据，orl人脸数据只是用来计算eigenvectors

TODO:
1.试验采用components和threshold的合适值
2.搭建NDK调试环境！
3.尝试将底层算法进行优化，初始化时只是读取算法模型，识别的时候只是进行识别操作，提高运行速度
4.添加照片的管理

****** 2014-3-18 ******
“如果将facerec的init和rec两个过程放在同一个thread中是否就不会出错了?” --> 这两个方法本来就都是放在同一个thread中
问题"搭建NDK调试环境！"参考网址：http://qiang106.iteye.com/blog/1830416
添加了照片管理，重新计算模型功能，将orl_faces人脸数据放在assets目录下，程序运行时复制到sdcard的demo文件夹中
解决了程序第一次运行时的耗时操作导致的界面黑屏问题[asynctask]，解决了人脸识别时在初始化失败的情况下程序的正常性

大问题：使用交叉验证的方法验证在含有更多数据的时候准确率是否会提高！
设置置信度，使之能够对不认识的人进行提醒！

新添加的照片可以不更新模型，但是肯定要计算出它的projection并保存下来
目前的xfacerecognition.yml文件保存的是num_components, mean, eigenvalue, eigenvector, projection, labels

问题：
1.改善程序在暂停和重新进入时的状态！不要出现界面无法响应的情况，另外库文件貌似也就没有加载了
2.删除照片之后在用户列表界面中没有及时刷新

===================================================================================
================================  New Version  ====================================
===================================================================================
****** 2014-4-10 ******
重新开工！计划如下：
1.该项目只做PCA，但是对头像进行预处理！---预处理代码插入成功！
2.预处理的过程暂时参照Shervin的做法！
3.后期使用其他的方式，例如Bytefish推荐的方式！
4.使用其他的人脸数据库！LFW！
5.将PCA在这个项目中做到极致！

ps：想办法实现识别的同时进行人脸检测！

ps：找到最好的阈值，拒绝识别结果！

****** 2014-4-11 ******
1.修改原版本，去除orl人脸数据库，使用我和shervin的两张图片作为应用默认的两张头像，我们作为默认的两个人
应用启动的时候将所有数据复制到sd卡中，然后正常运行！ 考虑去除删除人脸头像的功能
2.必须要有很多的默认人脸数据才能建立起子空间的基，否则准确率肯定低！所以说，上面默认只有2个人的方式需要修改！！！
要拿公开人脸数据库进行试验，得到结果才行！
3.此时返回“I don't kown you”有两种情况，一是当前帧图像不能检测到合适大小的人脸，二是的确在人脸库中不存在合适的（当前只有可能是库为空）

****** 2014-4-12 ******
1.去除了“I don't kown you”结果，只显示识别出的结果
2.修改用户注册时拍照界面，用户不需要任何点击，进入即可，系统自动检测人脸然后保存，并且是计算了PCA映射结果的
界面会提示保存了几张用户头像，用户随时可以返回退出该界面，如果用户注册时只填写了名字没有录入人脸也行

===================================================================================
================================= 一直可以做的改进 ==================================
===================================================================================
1.摄像头显示人脸头像的界面大些，即使用Android原生Camera API，而不是使用OpenCV Camera接口... OpenCV Native Camera如何？！待尝试！！

2.改进摄像头显示界面出现的Resume和Stop过程中的假死或者黑屏

3.优化Java和Native层的接口，使之更加简单

